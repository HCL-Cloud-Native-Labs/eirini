// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini/k8s"
)

type FakeDiskAPI struct {
	GetPodMetricsStub        func(context.Context) (map[string]float64, error)
	getPodMetricsMutex       sync.RWMutex
	getPodMetricsArgsForCall []struct {
		arg1 context.Context
	}
	getPodMetricsReturns struct {
		result1 map[string]float64
		result2 error
	}
	getPodMetricsReturnsOnCall map[int]struct {
		result1 map[string]float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiskAPI) GetPodMetrics(arg1 context.Context) (map[string]float64, error) {
	fake.getPodMetricsMutex.Lock()
	ret, specificReturn := fake.getPodMetricsReturnsOnCall[len(fake.getPodMetricsArgsForCall)]
	fake.getPodMetricsArgsForCall = append(fake.getPodMetricsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetPodMetricsStub
	fakeReturns := fake.getPodMetricsReturns
	fake.recordInvocation("GetPodMetrics", []interface{}{arg1})
	fake.getPodMetricsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDiskAPI) GetPodMetricsCallCount() int {
	fake.getPodMetricsMutex.RLock()
	defer fake.getPodMetricsMutex.RUnlock()
	return len(fake.getPodMetricsArgsForCall)
}

func (fake *FakeDiskAPI) GetPodMetricsCalls(stub func(context.Context) (map[string]float64, error)) {
	fake.getPodMetricsMutex.Lock()
	defer fake.getPodMetricsMutex.Unlock()
	fake.GetPodMetricsStub = stub
}

func (fake *FakeDiskAPI) GetPodMetricsArgsForCall(i int) context.Context {
	fake.getPodMetricsMutex.RLock()
	defer fake.getPodMetricsMutex.RUnlock()
	argsForCall := fake.getPodMetricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDiskAPI) GetPodMetricsReturns(result1 map[string]float64, result2 error) {
	fake.getPodMetricsMutex.Lock()
	defer fake.getPodMetricsMutex.Unlock()
	fake.GetPodMetricsStub = nil
	fake.getPodMetricsReturns = struct {
		result1 map[string]float64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskAPI) GetPodMetricsReturnsOnCall(i int, result1 map[string]float64, result2 error) {
	fake.getPodMetricsMutex.Lock()
	defer fake.getPodMetricsMutex.Unlock()
	fake.GetPodMetricsStub = nil
	if fake.getPodMetricsReturnsOnCall == nil {
		fake.getPodMetricsReturnsOnCall = make(map[int]struct {
			result1 map[string]float64
			result2 error
		})
	}
	fake.getPodMetricsReturnsOnCall[i] = struct {
		result1 map[string]float64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiskAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPodMetricsMutex.RLock()
	defer fake.getPodMetricsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDiskAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.DiskAPI = new(FakeDiskAPI)
