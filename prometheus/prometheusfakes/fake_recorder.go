// Code generated by counterfeiter. DO NOT EDIT.
package prometheusfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/prometheus"
)

type FakeRecorder struct {
	IncrementStub        func(string)
	incrementMutex       sync.RWMutex
	incrementArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecorder) Increment(arg1 string) {
	fake.incrementMutex.Lock()
	fake.incrementArgsForCall = append(fake.incrementArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IncrementStub
	fake.recordInvocation("Increment", []interface{}{arg1})
	fake.incrementMutex.Unlock()
	if stub != nil {
		fake.IncrementStub(arg1)
	}
}

func (fake *FakeRecorder) IncrementCallCount() int {
	fake.incrementMutex.RLock()
	defer fake.incrementMutex.RUnlock()
	return len(fake.incrementArgsForCall)
}

func (fake *FakeRecorder) IncrementCalls(stub func(string)) {
	fake.incrementMutex.Lock()
	defer fake.incrementMutex.Unlock()
	fake.IncrementStub = stub
}

func (fake *FakeRecorder) IncrementArgsForCall(i int) string {
	fake.incrementMutex.RLock()
	defer fake.incrementMutex.RUnlock()
	argsForCall := fake.incrementArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrementMutex.RLock()
	defer fake.incrementMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ prometheus.Recorder = new(FakeRecorder)
